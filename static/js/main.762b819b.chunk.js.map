{"version":3,"sources":["lightbox.js","App.js","serviceWorker.js","index.js"],"names":["Box","toggle","props","className","this","boxdata","on","x","y","id","onClick","React","Component","App","event","index","target","newdata","state","lightboxdata","setState","victory","map","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.762b819b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Box extends React.Component{\r\n    render() {\r\n        return(\r\n            <button \r\n                className={this.props.boxdata.on? \"on\" : \"off\"} \r\n                x={this.props.boxdata.x} \r\n                y={this.props.boxdata.y} \r\n                id={this.props.boxdata.id}\r\n                onClick={this.props.toggle}\r\n            >\r\n            </button>\r\n        )\r\n    }\r\n    toggle = () => {\r\n        this.props.toggle()\r\n    }\r\n}\r\n\r\nexport default Box;\r\n","import React from 'react';\nimport './App.css';\n// import lightboxdata from './lightboxData';\nimport Box from \"./lightbox\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      victory: false,\n      lightboxdata: [{\n        id: 1,\n        x: 0,\n        y: 2,\n        on: true\n    },\n    {\n        id: 2,\n        x: 1,\n        y: 2,\n        on: false\n    },\n    {\n        id: 3,\n        x: 2,\n        y: 2,\n        on: true\n    },\n    {\n        id: 4,\n        x: 0,\n        y: 1,\n        on: true\n    },\n    {\n        id: 5,\n        x: 1,\n        y: 1,\n        on: false\n    },\n    {\n        id: 6,\n        x: 2,\n        y: 1,\n        on: false\n    },\n    {\n        id: 7,\n        x: 0,\n        y: 0,\n        on: false\n    },\n    {\n        id: 8,\n        x: 1,\n        y: 0,\n        on: true\n    },\n    {\n        id: 9,\n        x: 2,\n        y: 0,\n        on: true\n    }\n]\n    }\n  }\n  render() {\n    return(\n      <div>\n        <header><h1>Light Game</h1></header>\n\n        <p>Click the boxes to turn off the lights. Whenever you click a box, that box, and the adjacent boxes will all change. Turn off all the lights to win.</p>\n        {this.state.victory? <p>You win!!</p> :<p></p>}\n        <div className=\"box\">\n        <div className=\"grid\">\n          {this.state.lightboxdata.map((boxdata,i) =>\n            <div className=\"grid-item\" key={i}>\n              <Box boxdata={this.state.lightboxdata[i]} toggle={this.toggle}/>\n            </div>\n          )}\n        </div>\n        </div>\n        <div className=\"box\">\n            {/* <button className=\"app\" onClick={this.newGame}>New Game</button> */}\n        </div>\n      </div>\n    )\n  }\n  toggle = (event) => {\n    const index = event.target.id -1;\n    let newdata = [...this.state.lightboxdata];\n    newdata[index].on = !newdata[index].on;\n    if (index === 0) {\n      newdata[1].on = !newdata[1].on\n      newdata[3].on = !newdata[3].on\n    } else if (index === 1) {\n      newdata[0].on = !newdata[0].on\n      newdata[2].on = !newdata[2].on\n      newdata[4].on = !newdata[4].on\n    } else if (index === 2) {\n      newdata[1].on = !newdata[1].on\n      newdata[5].on = !newdata[5].on\n    } else if (index === 3) {\n      newdata[0].on = !newdata[0].on\n      newdata[4].on = !newdata[4].on\n      newdata[6].on = !newdata[6].on\n    } else if (index === 4) {\n      newdata[1].on = !newdata[1].on\n      newdata[3].on = !newdata[3].on\n      newdata[5].on = !newdata[5].on\n      newdata[7].on = !newdata[7].on\n    } else if (index === 5) {\n      newdata[2].on = !newdata[2].on\n      newdata[4].on = !newdata[4].on\n      newdata[8].on = !newdata[8].on\n    } else if (index === 6) {\n      newdata[3].on = !newdata[3].on\n      newdata[7].on = !newdata[7].on\n    } else if (index === 7) {\n      newdata[8].on = !newdata[8].on\n      newdata[6].on = !newdata[6].on\n      newdata[4].on = !newdata[4].on\n    } else if (index === 8) {\n      newdata[5].on = !newdata[5].on\n      newdata[7].on = !newdata[7].on\n    } \n    this.setState(state => ({\n      lightboxdata: newdata\n    }))\n    if (\n      newdata[0].on === false && \n      newdata[1].on === false &&\n      newdata[2].on === false &&\n      newdata[3].on === false &&\n      newdata[4].on === false &&\n      newdata[5].on === false &&\n      newdata[6].on === false &&\n      newdata[7].on === false &&\n      newdata[8].on === false\n      ) {\n        this.setState({\n          victory: true\n        })\n    } else this.setState({\n      victory: false\n    })\n  }\n}\n\nexport default App;\n\n// Math.floor(Math.random()*2)\n//idea: Let's have all the lightboxes be fed into from an array. Call it box data.\n//Box data will contain: Position: (number), status: (on/off), and an index if that is necessary.\n//We can make it so that clicking on a particular box will cause the adjacent boxes to turn also.\n//Essentially, clicking on a box will change status, and change the boxes above, below, left and right.\n//It would be CONVENIENT if we could assign a coordinate system, and then x+1, x-1, y+1, y-1 would all change\n//in addition to the box at (x,y).\n//What we would need to account for is if there is no x coordinate below: ie, a border box\n//We could create an if statement, basically catching the \"out of bounds\" boxes and prevent it from crashing\n//start with 3x3\n\n//Current Issue: While data is imported, I can't seem to get it into the state\n//In other words, I have this data with no way to manipulate it that I know of\n// ;-;\n\n  // toggle2 = (event) => {\n  //   const elementsIndex = this.state.lightboxdata.findIndex(element => element.id)\n  //   let newArray = [...this.state.lightboxdata];\n  //   newArray[elementsIndex].on = !newArray[elementsIndex].on;\n  //   newArray[elementsIndex+2].on = !newArray[elementsIndex+2].on;\n  //   // newArray[elementsIndex] = {...newArray[elementsIndex], on: !newArray[elementsIndex].on}\n  //   this.setState({\n  //     lightboxdata: newArray\n  //   });\n  // }\n\n  //Idea to check if game is won: check each box's state, if they're all off, the display victory","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}